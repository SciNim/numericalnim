InterpolatorType	numericalnim/interpolate.html#InterpolatorType	interpolate: InterpolatorType	
EvalHandler	numericalnim/interpolate.html#EvalHandler	interpolate: EvalHandler	
Eval2DHandler	numericalnim/interpolate.html#Eval2DHandler	interpolate: Eval2DHandler	
Interpolator2DType	numericalnim/interpolate.html#Interpolator2DType	interpolate: Interpolator2DType	
EvalUnstructured2DHandler	numericalnim/interpolate.html#EvalUnstructured2DHandler	interpolate: EvalUnstructured2DHandler	
InterpolatorUnstructured2DType	numericalnim/interpolate.html#InterpolatorUnstructured2DType	interpolate: InterpolatorUnstructured2DType	
Eval3DHandler	numericalnim/interpolate.html#Eval3DHandler	interpolate: Eval3DHandler	
Interpolator3DType	numericalnim/interpolate.html#Interpolator3DType	interpolate: Interpolator3DType	
findInterval	numericalnim/interpolate.html#findInterval,openArray[float],float	interpolate: findInterval(list: openArray[float]; x: float): int	
eval_cubicspline	numericalnim/interpolate.html#eval_cubicspline,InterpolatorType[T],float	interpolate: eval_cubicspline[T](spline: InterpolatorType[T]; x: float): T	
derivEval_cubicspline	numericalnim/interpolate.html#derivEval_cubicspline,InterpolatorType[T],float	interpolate: derivEval_cubicspline[T](spline: InterpolatorType[T]; x: float): T	
newCubicSpline	numericalnim/interpolate.html#newCubicSpline,openArray[float],openArray[T]	interpolate: newCubicSpline[T: SomeFloat](X: openArray[float]; Y: openArray[T]): InterpolatorType[\n    T]	
eval_hermitespline	numericalnim/interpolate.html#eval_hermitespline,InterpolatorType[T],float	interpolate: eval_hermitespline[T](spline: InterpolatorType[T]; x: float): T	
derivEval_hermitespline	numericalnim/interpolate.html#derivEval_hermitespline,InterpolatorType[T],float	interpolate: derivEval_hermitespline[T](spline: InterpolatorType[T]; x: float): T	
newHermiteSpline	numericalnim/interpolate.html#newHermiteSpline,openArray[float],openArray[T],openArray[T]	interpolate: newHermiteSpline[T](X: openArray[float]; Y, dY: openArray[T]): InterpolatorType[\n    T]	
newHermiteSpline	numericalnim/interpolate.html#newHermiteSpline,openArray[float],openArray[T]	interpolate: newHermiteSpline[T](X: openArray[float]; Y: openArray[T]): InterpolatorType[T]	
eval_linear1d	numericalnim/interpolate.html#eval_linear1d,InterpolatorType[T],float	interpolate: eval_linear1d[T](spline: InterpolatorType[T]; x: float): T	
derivEval_linear1d	numericalnim/interpolate.html#derivEval_linear1d,InterpolatorType[T],float	interpolate: derivEval_linear1d[T](spline: InterpolatorType[T]; x: float): T	
newLinear1D	numericalnim/interpolate.html#newLinear1D,openArray[float],openArray[T]	interpolate: newLinear1D[T](X: openArray[float]; Y: openArray[T]): InterpolatorType[T]	
eval	numericalnim/interpolate.html#eval.t,InterpolatorType[T],float	interpolate: eval[T](interpolator: InterpolatorType[T]; x: float): untyped	
derivEval	numericalnim/interpolate.html#derivEval.t,InterpolatorType[T],float	interpolate: derivEval[T](interpolator: InterpolatorType[T]; x: float): untyped	
eval	numericalnim/interpolate.html#eval,InterpolatorType[T],openArray[float]	interpolate: eval[T](spline: InterpolatorType[T]; x: openArray[float]): seq[T]	
toProc	numericalnim/interpolate.html#toProc,InterpolatorType[T]	interpolate: toProc[T](spline: InterpolatorType[T]): InterpolatorProc[T]	
toNumContextProc	numericalnim/interpolate.html#toNumContextProc.c,InterpolatorType[T]	interpolate: toNumContextProc[T](spline: InterpolatorType[T]): NumContextProc[T, float]	
derivEval	numericalnim/interpolate.html#derivEval,InterpolatorType[T],openArray[float]	interpolate: derivEval[T](spline: InterpolatorType[T]; x: openArray[float]): seq[T]	
toDerivProc	numericalnim/interpolate.html#toDerivProc,InterpolatorType[T]	interpolate: toDerivProc[T](spline: InterpolatorType[T]): InterpolatorProc[T]	
toDerivNumContextProc	numericalnim/interpolate.html#toDerivNumContextProc,InterpolatorType[T]	interpolate: toDerivNumContextProc[T](spline: InterpolatorType[T]): NumContextProc[T, float]	
eval_nearestneigh	numericalnim/interpolate.html#eval_nearestneigh,Interpolator2DType[T],float,float	interpolate: eval_nearestneigh[T](self: Interpolator2DType[T]; x, y: float): T	
newNearestNeighbour2D	numericalnim/interpolate.html#newNearestNeighbour2D,Tensor[T],,	interpolate: newNearestNeighbour2D[T](z: Tensor[T]; xlim, ylim: (float, float)): Interpolator2DType[\n    T]	
eval_bilinear	numericalnim/interpolate.html#eval_bilinear,Interpolator2DType[T],float,float	interpolate: eval_bilinear[T](self: Interpolator2DType[T]; x, y: float): T	
newBilinearSpline	numericalnim/interpolate.html#newBilinearSpline,Tensor[T],,	interpolate: newBilinearSpline[T](z: Tensor[T]; xlim, ylim: (float, float)): Interpolator2DType[\n    T]	
eval_bicubic	numericalnim/interpolate.html#eval_bicubic,Interpolator2DType[T],float,float	interpolate: eval_bicubic[T](self: Interpolator2DType[T]; x, y: float): T	
newBicubicSpline	numericalnim/interpolate.html#newBicubicSpline,Tensor[T],,	interpolate: newBicubicSpline[T](z: Tensor[T]; xlim, ylim: (float, float)): Interpolator2DType[\n    T]	
eval_barycentric2d	numericalnim/interpolate.html#eval_barycentric2d,InterpolatorUnstructured2DType[T,U],float,float	interpolate: eval_barycentric2d[T, U](self: InterpolatorUnstructured2DType[T, U]; x, y: float): U	
newBarycentric2D	numericalnim/interpolate.html#newBarycentric2D,Tensor[T: SomeFloat],Tensor[U]	interpolate: newBarycentric2D[T: SomeFloat; U](points: Tensor[T]; values: Tensor[U]): InterpolatorUnstructured2DType[\n    T, U]	
eval	numericalnim/interpolate.html#eval.t,Interpolator2DType[T],float,float	interpolate: eval[T](interpolator: Interpolator2DType[T]; x, y: float): untyped	
eval	numericalnim/interpolate.html#eval.t,InterpolatorUnstructured2DType[T,U],T,T	interpolate: eval[T, U](interpolator: InterpolatorUnstructured2DType[T, U]; x, y: T): untyped	
eval_trilinear	numericalnim/interpolate.html#eval_trilinear,Interpolator3DType[T],float,float,float	interpolate: eval_trilinear[T](self: Interpolator3DType[T]; x, y, z: float): T	
newTrilinearSpline	numericalnim/interpolate.html#newTrilinearSpline,Tensor[T],,,	interpolate: newTrilinearSpline[T](f: Tensor[T]; xlim, ylim, zlim: (float, float)): Interpolator3DType[\n    T]	
eval	numericalnim/interpolate.html#eval.t,Interpolator3DType[T],float,float,float	interpolate: eval[T](interpolator: Interpolator3DType[T]; x, y, z: float): untyped	
CubicSpline	numericalnim/interpolate.html#cubicspline	 CubicSpline	
