nimTitle	utils	numericalnim/utils.html	module src/numericalnim/utils		0
nim	Vector	numericalnim/utils.html#Vector	object Vector		15
nim	newVector	numericalnim/utils.html#newVector,openArray[T]	proc newVector[T](components: openArray[T]): Vector[T]		19
nim	checkVectorSizes	numericalnim/utils.html#checkVectorSizes,Vector,Vector	proc checkVectorSizes(v1, v2: Vector)		22
nim	`[]`	numericalnim/utils.html#[],Vector[T],int	proc `[]`[T](v: Vector[T]; i: int): T		29
nim	`[]`	numericalnim/utils.html#[],Vector[T],int_2	proc `[]`[T](v: var Vector[T]; i: int): var T		30
nim	`[]=`	numericalnim/utils.html#[]=,Vector[T],int,T	proc `[]=`[T](v: var Vector[T]; i: int; value: T)		31
nim	items	numericalnim/utils.html#items.i,Vector[T]	iterator items[T](v: Vector[T]): T		33
nim	mitems	numericalnim/utils.html#mitems.i,Vector[T]	iterator mitems[T](v: var Vector[T]): var T		36
nim	pairs	numericalnim/utils.html#pairs.i,Vector[T]	iterator pairs[T](v: Vector[T]): (int, T)		39
nim	`$`	numericalnim/utils.html#$,Vector	proc `$`(v: Vector): string		42
nim	`@`	numericalnim/utils.html#@,Vector[T]	proc `@`[T](v: Vector[T]): seq[T]		43
nim	`@`	numericalnim/utils.html#@,Vector[Vector[T]]	proc `@`[T](v: Vector[Vector[T]]): seq[seq[T]]		44
nim	`@`	numericalnim/utils.html#@,Vector[Vector[Vector[T]]]	proc `@`[T](v: Vector[Vector[Vector[T]]]): seq[seq[seq[T]]]		47
nim	toTensor	numericalnim/utils.html#toTensor,Vector	proc toTensor(v: Vector): Tensor[float]		50
nim	`==`	numericalnim/utils.html#==,Vector[T],Vector[T]	proc `==`[T](v1, v2: Vector[T]): bool		51
nim	size	numericalnim/utils.html#size,Vector[T]	proc size[T](v: Vector[T]): int		57
nim	`+`	numericalnim/utils.html#+,Vector[T],Vector[T]	proc `+`[T](v1, v2: Vector[T]): Vector[T]		59
nim	`+`	numericalnim/utils.html#+,Vector[T],float	proc `+`[T](v1: Vector[T]; d: float): Vector[T]		66
nim	`+`	numericalnim/utils.html#+,float,Vector[T]	proc `+`[T](d: float; v1: Vector[T]): Vector[T]		72
nim	`+.`	numericalnim/utils.html#+..t,float,Vector[T]	template `+.`[T](d: float; v1: Vector[T]): Vector[T]		78
nim	`+.`	numericalnim/utils.html#+..t,Vector[T],float	template `+.`[T](v1: Vector[T]; d: float): Vector[T]		81
nim	`+`	numericalnim/utils.html#+,Vector[T],T	proc `+`[T](v1: Vector[T]; d: T): Vector[T]		85
nim	`+`	numericalnim/utils.html#+,T,Vector[T]	proc `+`[T](d: T; v1: Vector[T]): Vector[T]		91
nim	`+=`	numericalnim/utils.html#+=,Vector[T],Vector[T]	proc `+=`[T](v1: var Vector[T]; v2: Vector[T])		97
nim	`+=`	numericalnim/utils.html#+=,Vector[T],float	proc `+=`[T](v1: var Vector[T]; d: float)		102
nim	`+.=`	numericalnim/utils.html#+.=.t,Vector[T],float	template `+.=`[T](v1: var Vector[T]; d: float)		106
nim	`+=`	numericalnim/utils.html#+=,Vector[T],T	proc `+=`[T](v1: var Vector[T]; d: T)		109
nim	`-`	numericalnim/utils.html#-,Vector[T],Vector[T]	proc `-`[T](v1, v2: Vector[T]): Vector[T]		113
nim	`-`	numericalnim/utils.html#-,Vector[T],float	proc `-`[T](v1: Vector[T]; d: float): Vector[T]		120
nim	`-`	numericalnim/utils.html#-,float,Vector[T]	proc `-`[T](d: float; v1: Vector[T]): Vector[T]		126
nim	`-.`	numericalnim/utils.html#-..t,float,Vector[T]	template `-.`[T](d: float; v1: Vector[T]): Vector[T]		132
nim	`-.`	numericalnim/utils.html#-..t,Vector[T],float	template `-.`[T](v1: Vector[T]; d: float): Vector[T]		135
nim	`-`	numericalnim/utils.html#-,Vector[T],T	proc `-`[T](v1: Vector[T]; d: T): Vector[T]		138
nim	`-`	numericalnim/utils.html#-,T,Vector[T]	proc `-`[T](d: T; v1: Vector[T]): Vector[T]		144
nim	`-=`	numericalnim/utils.html#-=,Vector[T],Vector[T]	proc `-=`[T](v1: var Vector[T]; v2: Vector[T])		150
nim	`-=`	numericalnim/utils.html#-=,Vector[T],float	proc `-=`[T](v1: var Vector[T]; d: float)		155
nim	`-.=`	numericalnim/utils.html#-.=.t,Vector[T],float	template `-.=`[T](v1: var Vector[T]; d: float)		159
nim	`-=`	numericalnim/utils.html#-=,Vector[T],T	proc `-=`[T](v1: var Vector[T]; d: T)		162
nim	`/`	numericalnim/utils.html#/,Vector[T],float	proc `/`[T](v1: Vector[T]; d: float): Vector[T]		166
nim	`*`	numericalnim/utils.html#*,Vector[T],float	proc `*`[T](v1: Vector[T]; d: float): Vector[T]		171
nim	`*`	numericalnim/utils.html#*,float,Vector[T]	proc `*`[T](d: float; v1: Vector[T]): Vector[T]		176
nim	`*`	numericalnim/utils.html#*,Vector[T],Vector[T]	proc `*`[T](v1, v2: Vector[T]): float		181
nim	`*.`	numericalnim/utils.html#*.,Vector[T],Vector[T]	proc `*.`[T](v1, v2: Vector[T]): Vector[T]		186
nim	`/.`	numericalnim/utils.html#/.,Vector[T],Vector[T]	proc `/.`[T](v1, v2: Vector[T]): Vector[T]		192
nim	`*.=`	numericalnim/utils.html#*.=,Vector[T],Vector[T]	proc `*.=`[T](v1: var Vector[T]; v2: Vector[T])		198
nim	`/.=`	numericalnim/utils.html#/.=,Vector[T],Vector[T]	proc `/.=`[T](v1: var Vector[T]; v2: Vector[T])		202
nim	dot	numericalnim/utils.html#dot,Vector[T],Vector[T]	proc dot[T](v1, v2: Vector[T]): float		206
nim	`*=`	numericalnim/utils.html#*=,Vector[T],float	proc `*=`[T](v1: var Vector[T]; d: float)		208
nim	`/=`	numericalnim/utils.html#/=,Vector[T],float	proc `/=`[T](v1: var Vector[T]; d: float)		211
nim	`-`	numericalnim/utils.html#-,Vector[T]	proc `-`[T](v1: Vector[T]): Vector[T]		214
nim	abs	numericalnim/utils.html#abs,Vector[T]	proc abs[T](v1: Vector[T]): Vector[T]		219
nim	norm	numericalnim/utils.html#norm,Vector,int	proc norm(v1: Vector; p: int = 2): float64		225
nim	sum	numericalnim/utils.html#sum,Vector[T]	proc sum[T](v: Vector[T]): T		243
nim	mean_squared_error	numericalnim/utils.html#mean_squared_error,Vector[T],Vector[T]	proc mean_squared_error[T](v1, v2: Vector[T]): float		252
nim	`^`	numericalnim/utils.html#^,Vector[float],Natural	proc `^`[float](v: Vector[float]; power: Natural): Vector[float]		254
nim	`^`	numericalnim/utils.html#^,Vector[float],float	proc `^`[float](v: Vector[float]; power: float): Vector[float]		261
nim	clone	numericalnim/utils.html#clone,T	proc clone[T](x: T): T		269
nim	mean_squared_error	numericalnim/utils.html#mean_squared_error,T,T	proc mean_squared_error[T](y_true, y: T): auto		270
nim	calcError	numericalnim/utils.html#calcError,T,T	proc calcError[T](y_true, y: T): auto		271
nim	hermiteSpline	numericalnim/utils.html#hermiteSpline,float,float,float,T,T,T,T	proc hermiteSpline[T](x, x1, x2: float; y1, y2, dy1, dy2: T): T		273
nim	hermiteInterpolate	numericalnim/utils.html#hermiteInterpolate,openArray[float],openArray[float],openArray[T],openArray[T]	proc hermiteInterpolate[T](x: openArray[float]; t: openArray[float];\n                      y, dy: openArray[T]): seq[T]		282
nim	chi2	numericalnim/utils.html#chi2,,,	proc chi2[T](yData, yFit, yError: seq[T] or Tensor[T]): T		316
nim	delete	numericalnim/utils.html#delete,seq[T],seq[int]	proc delete[T](s: var seq[T]; idx: seq[int])		332
nim	getIndexTable	numericalnim/utils.html#getIndexTable,openArray[T]	proc getIndexTable[T](x: openArray[T]): Table[T, seq[int]]		342
nim	findDuplicates	numericalnim/utils.html#findDuplicates,openArray[T],bool	proc findDuplicates[T](x: openArray[T]; isSorted: bool = false): seq[seq[int]]		349
nim	removeDuplicates	numericalnim/utils.html#removeDuplicates,seq[Tx],seq[seq[Ty]]	proc removeDuplicates[Tx, Ty](x: seq[Tx]; y: seq[seq[Ty]]): tuple[x: seq[Tx],\n    y: seq[seq[Ty]]]		360
nim	sortDataset	numericalnim/utils.html#sortDataset,seq[Tx],seq[seq[Ty]],SortOrder	proc sortDataset[Tx, Ty](x: seq[Tx]; y: seq[seq[Ty]];\n                    sortOrder: SortOrder = Ascending): tuple[x: seq[Tx],\n    y: seq[seq[Ty]]]		385
nim	sortDataset	numericalnim/utils.html#sortDataset,seq[Tx],seq[Ty],SortOrder	proc sortDataset[Tx, Ty](x: seq[Tx]; y: seq[Ty]; sortOrder: SortOrder = Ascending): tuple[\n    x: seq[Tx], y: seq[Ty]]		406
nim	sortAndTrimDataset	numericalnim/utils.html#sortAndTrimDataset,seq[Tx],seq[seq[Ty]],SortOrder	proc sortAndTrimDataset[Tx, Ty](x: seq[Tx]; y: seq[seq[Ty]];\n                           sortOrder: SortOrder = Ascending): tuple[x: seq[Tx],\n    y: seq[seq[Ty]]]		411
nim	sortAndTrimDataset	numericalnim/utils.html#sortAndTrimDataset,seq[Tx],seq[Ty],SortOrder	proc sortAndTrimDataset[Tx, Ty](x: seq[Tx]; y: seq[Ty];\n                           sortOrder: SortOrder = Ascending): tuple[x: seq[Tx],\n    y: seq[Ty]]		416
nim	sortDataset	numericalnim/utils.html#sortDataset,openArray[float],openArray[T]	proc sortDataset[T](X: openArray[float]; Y: openArray[T]): seq[(float, T)]		422
nim	meshgridFlat	numericalnim/utils.html#meshgridFlat,Tensor[T],Tensor[T]	proc meshgridFlat[T](x, y: Tensor[T]): (Tensor[T], Tensor[T])		429
nim	meshgrid	numericalnim/utils.html#meshgrid,varargs[Tensor[T]]	proc meshgrid[T](ts: varargs[Tensor[T]]): Tensor[T]		457
nim	isClose	numericalnim/utils.html#isClose,T,T,float	proc isClose[T](y1, y2: T; tol: float = 0.001): bool		474
nim	arange	numericalnim/utils.html#arange,float,float,float	proc arange(x1, x2, dx: float; includeStart = true; includeEnd = false): seq[float]		482
nim	linspace	numericalnim/utils.html#linspace,float,float,int	proc linspace(x1, x2: float; N: int): seq[float]		498
nim	timeit	numericalnim/utils.html#timeit.t,untyped,int,string	template timeit(s: untyped; n = 100; msg = ""): untyped		510
nim	benchmarkit	numericalnim/utils.html#benchmarkit.t,untyped,int,string,T	template benchmarkit[T](s: untyped; n = 100; msg = ""; answer: T; onlyEfficiency = false): untyped		518
nimgrp	+=	numericalnim/utils.html#+=-procs-all	proc		97
nimgrp	sortandtrimdataset	numericalnim/utils.html#sortAndTrimDataset-procs-all	proc		411
nimgrp	^	numericalnim/utils.html#^-procs-all	proc		254
nimgrp	*	numericalnim/utils.html#*-procs-all	proc		171
nimgrp	-	numericalnim/utils.html#--procs-all	proc		113
nimgrp	sortdataset	numericalnim/utils.html#sortDataset-procs-all	proc		385
nimgrp	@	numericalnim/utils.html#@-procs-all	proc		43
nimgrp	-=	numericalnim/utils.html#-=-procs-all	proc		150
nimgrp	meansquarederror	numericalnim/utils.html#mean_squared_error-procs-all	proc		252
nimgrp	[]	numericalnim/utils.html#[]-procs-all	proc		29
nimgrp	+	numericalnim/utils.html#+-procs-all	proc		59
nimgrp	+.	numericalnim/utils.html#+.-templates-all	template		78
nimgrp	-.	numericalnim/utils.html#-.-templates-all	template		132
heading	Utils	numericalnim/utils.html#utils	 Utils		0
