trapz	numericalnim/integrate.html#trapz,NumContextProc[T,float],float,float,int,NumContext[T,float]	integrate: trapz[T](f: NumContextProc[T, float]; xStart, xEnd: float; N = 500;\n         ctx: NumContext[T, float] = nil): T	
trapz	numericalnim/integrate.html#trapz,openArray[T],openArray[float]	integrate: trapz[T](Y: openArray[T]; X: openArray[float]): T	
cumtrapz	numericalnim/integrate.html#cumtrapz,openArray[T],openArray[float]	integrate: cumtrapz[T](Y: openArray[T]; X: openArray[float]): seq[T]	
cumtrapz	numericalnim/integrate.html#cumtrapz,NumContextProc[T,float],openArray[float],NumContext[T,float],float	integrate: cumtrapz[T](f: NumContextProc[T, float]; X: openArray[float];\n            ctx: NumContext[T, float] = nil; dx = 0.00001): seq[T]	
simpson	numericalnim/integrate.html#simpson,NumContextProc[T,float],float,float,int,NumContext[T,float]	integrate: simpson[T](f: NumContextProc[T, float]; xStart, xEnd: float; N = 500;\n           ctx: NumContext[T, float] = nil): T	
simpson	numericalnim/integrate.html#simpson,openArray[T],openArray[float]	integrate: simpson[T](Y: openArray[T]; X: openArray[float]): T	
adaptiveSimpson	numericalnim/integrate.html#adaptiveSimpson,NumContextProc[T,float],float,float,float,NumContext[T,float]	integrate: adaptiveSimpson[T](f: NumContextProc[T, float]; xStart, xEnd: float; tol = 1e-8;\n                   ctx: NumContext[T, float] = nil): T	
adaptiveSimpson2	numericalnim/integrate.html#adaptiveSimpson2,NumContextProc[T,float],float,float,float,NumContext[T,float]	integrate: adaptiveSimpson2[T](f: NumContextProc[T, float]; xStart, xEnd: float;\n                    tol = 1e-8; ctx: NumContext[T, float] = nil): T	
cumsimpson	numericalnim/integrate.html#cumsimpson,openArray[T],openArray[float]	integrate: cumsimpson[T](Y: openArray[T]; X: openArray[float]): seq[T]	
cumsimpson	numericalnim/integrate.html#cumsimpson,NumContextProc[T,float],openArray[float],NumContext[T,float],float	integrate: cumsimpson[T](f: NumContextProc[T, float]; X: openArray[float];\n              ctx: NumContext[T, float] = nil; dx = 0.00001): seq[T]	
romberg	numericalnim/integrate.html#romberg,NumContextProc[T,float],float,float,int,float,NumContext[T,float]	integrate: romberg[T](f: NumContextProc[T, float]; xStart, xEnd: float; depth = 8;\n           tol = 1e-8; ctx: NumContext[T, float] = nil): T	
romberg	numericalnim/integrate.html#romberg,openArray[T],openArray[float]	integrate: romberg[T](Y: openArray[T]; X: openArray[float]): T	
gaussQuad	numericalnim/integrate.html#gaussQuad,NumContextProc[T,float],float,float,int,int,NumContext[T,float]	integrate: gaussQuad[T](f: NumContextProc[T, float]; xStart, xEnd: float; N = 100;\n             nPoints = 7; ctx: NumContext[T, float] = nil): T	
adaptiveGaussLocal	numericalnim/integrate.html#adaptiveGaussLocal,NumContextProc[T,float],float,float,float,NumContext[T,float]	integrate: adaptiveGaussLocal[T](f: NumContextProc[T, float]; xStart, xEnd: float;\n                      tol = 1e-8; ctx: NumContext[T, float] = nil): T	
cmpInterval	numericalnim/integrate.html#cmpInterval,IntervalType[T,U,V],IntervalType[T,U,V]	integrate: cmpInterval[T; U; V](interval1, interval2: IntervalType[T, U, V]): int	
insert	numericalnim/integrate.html#insert,IntervalList[T,U,V],IntervalType[T,U,V]	integrate: insert[T; U; V](intervalList: var IntervalList[T, U, V];\n                el: IntervalType[T, U, V])	
pop	numericalnim/integrate.html#pop,IntervalList[T,U,V]	integrate: pop[T; U; V](intervalList: var IntervalList[T, U, V]): IntervalType[T, U, V]	
adaptiveGauss	numericalnim/integrate.html#adaptiveGauss,NumContextProc[T,U],U,U,float,openArray[U],int,NumContext[T,U]	integrate: adaptiveGauss[T; U](f_in: NumContextProc[T, U]; xStart_in, xEnd_in: U;\n                    tol = 1e-8; initialPoints: openArray[U] = @[];\n                    maxintervals: int = 10000; ctx: NumContext[T, U] = nil): T	
cumGaussSpline	numericalnim/integrate.html#cumGaussSpline,NumContextProc[T,U],U,U,float,openArray[U],int,NumContext[T,U]	integrate: cumGaussSpline[T; U](f_in: NumContextProc[T, U]; xStart_in, xEnd_in: U;\n                     tol = 1e-8; initialPoints: openArray[U] = @[];\n                     maxintervals: int = 10000; ctx: NumContext[T, U] = nil): InterpolatorType[\n    T]	
cumGauss	numericalnim/integrate.html#cumGauss,NumContextProc[T,float],openArray[float],float,openArray[float],int,NumContext[T,float]	integrate: cumGauss[T](f_in: NumContextProc[T, float]; X: openArray[float]; tol = 1e-8;\n            initialPoints: openArray[float] = @[]; maxintervals: int = 10000;\n            ctx: NumContext[T, float] = nil): seq[T]	
Integration	numericalnim/integrate.html#integration	 Integration	
Integrate discrete data:	numericalnim/integrate.html#integration-integrate-discrete-datacolon	  Integrate discrete data:	
Integrate continous functions:	numericalnim/integrate.html#integration-integrate-continous-functionscolon	  Integrate continous functions:	
Cumulative integration:	numericalnim/integrate.html#integration-cumulative-integrationcolon	  Cumulative integration:	
